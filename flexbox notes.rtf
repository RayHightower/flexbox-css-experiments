{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww13660\viewh12820\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs48 \cf0 FlexBox Explained
\b0\fs24 \
\
For each of the directions below, add these declarations to the existing ul or li elements.\
\
The first grouping has to do with the flex-container, or the ul in this example.\
\

\b 1. ul \{ display: flex; \}
\b0 \
This gets everything on a single line. By default, the direction is in a row and in standard order.\
\

\b 2. ul \{display: flex; flex-direction: ***; \}
\b0 \
*** can equal row, row-reverse, column, column-reverse\
This takes the elements and places them in a single row or a single column. Ordering is either in source order or the reverse of the source order. Flex-direction defines our main axis.\
\

\b 3. ul \{ display: flex; flex-direction: as before, flex-wrap: ***;\}
\b0 \
*** can equal wrap, wrap-reverse, or nowrap\
flex-direction orders the individual items.\
flex-wrap orders the rows/columns created\
\

\b 4. ul \{ display: flex; flex-flow: ***;\}
\b0 \
flex-flow is shorthand for flex-direction and flex-wrap\
It takes two arguments, just like the individual properties.\
Example: row wrap, row-reverse wrap, column nowrap, column-reverse wrap-reverse, etc\
Just because the row/column is reversed does not mean the wrap has to be reversed\
\

\b 5. ul \{ display: flex; flex-flow: row wrap; justify-content: ***; \}
\b0 \
*** can equal flex-start, flex-end, center, space-between, space-around\
Justify content determines the distribution of the flex-items within the flex-container on the main axis \'97 in other words, how should space be allocated relative to the width of each item?\
If flex-direction is row, then horizontal is the main axis. When flex-direction is column, then column is the main axis.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 6. ul \{ display: flex; flex-flow: row wrap; justify-content: center;  height: 400px;\}\

\b0 This artificially gives our row some height. In the next step, we\'92ll try some cross axis alignment. Since we\'92re working with a row, the cross axis is the vertical axis.\
\

\b 7. ul \{ display: flex; flex-flow: row wrap; justify-content: center;  height: 400px; align-items: ***\}\

\b0 *** can equal flex-start, flex-end, center, baseline, stretch\
This aligns our items on the cross axis. Since we\'92re working with a row currently, this is aligning elements in vertical space. \
\
\
\
The next set of properties are about the individual flex-items, or the li\'92s in this example.\
\

\b 8. .flex2\{ border: 2px dotted blue; order: ***; \}
\b0 \
*** can be an integer.\
1 will move the .flex2 boxes to the end of the list, while -1 will move them to the start of the list. 0 is neutral. The border styling is to help us differentiate between the li\'92s with the .flex2 class and those that don\'92t have it.\
\

\b 9. .flex2\{ border: 2px dotted blue; flex-basis: ***; \}\

\b0 flex-basis is analogous to width, but not quite the same thing. Width is an absolute measurement \'97 an element is that wide, all the time. We can measure width in relative units (say 25% instead of 250px), but in the end, the measurement itself never changes. For flex-basis, we try to achieve a given width with the space available. It could be smaller than this width, or it could be wider, depending on the extra space and how that\'92s supposed to be distributed. Distribution of extra space is controlled by flex-grow and flex-shrink (below).\
\

\b 10. .flex2\{ border: 2px dotted blue; flex-grow: ***; \}\

\b0 *** can be 0 or a positive integer. (It won\'92t break with a negative integer, but it won\'92t do anything either.)\
Flex-grow, like flex-shrink (below), distributes extra space once each element is displayed on the page. In this example, our flex-items are center-aligned (see justify-content: center on the ul). By assigning a value to flex-grow, any extra space will be assigned in greater proportion to this element, making it larger relative to the other items. Note there is no unit with this measurement \'97 it\'92s simply a proportion.\
\

\b 11. .flex2\{ border: 2px dotted blue; flex-shrink: ***; \}\

\b0 *** can be 0 or a positive integer. (It won\'92t break with a negative integer, but it won\'92t do anything either.)\
Flex-shrink controls what happens to extra space as elements shrink.  By assigning a value to flex-shrink, as elements get smaller on the page, this element will get smaller faster than the others. Note there is no unit with this measurement \'97 it\'92s simply a proportion.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 12. .flex2\{ border: 2px dotted blue; flex: G S B; \}\

\b0 G = flex-grow\
S = flex-shrink\
B = flex-basis
\b \

\b0 This is the shorthand for combining flex-grow, flex-shrink, and flex-basis. }